{
	"name": "SevDesk - Mahnwesen - Teil 1: Erkennung (v2)",
	"nodes": [
		{
			"parameters": {
				"rule": {
					"interval": [
						{
							"field": "days",
							"daysInterval": 1
						}
					]
				}
			},
			"id": "031_TRG_01",
			"name": "Schedule Trigger",
			"type": "n8n-nodes-base.scheduleTrigger",
			"typeVersion": 1.2,
			"position": [250, 300]
		},
		{
			"parameters": {
				"resource": "invoice",
				"operation": "getMany",
				"additionalFields": {
					"status": "100,200",
					"startDate": "={{ $now.minus({months: 6}).format('YYYY-MM-DD') }}",
					"endDate": "={{ $now.format('YYYY-MM-DD') }}"
				}
			},
			"id": "031_SVC_01",
			"name": "SevDesk - Offene Rechnungen",
			"type": "n8n-nodes-sevdesk-v2.sevDesk",
			"typeVersion": 1,
			"position": [650, 300],
			"credentials": {
				"sevDeskApi": {
					"id": "6",
					"name": "SevDesk API"
				}
			}
		},
		{
			"parameters": {
				"code": "// Filter für überfällige Rechnungen und Kategorisierung nach Mahnstufen\nconst invoices = $input.item.json;\nconst today = new Date();\n\n// Konfigurierbare Mahnstufen (Standard-Konfiguration)\nconst reminderLevels = [\n  { days: 7, level: 1, fee: 5 },\n  { days: 14, level: 2, fee: 10 },\n  { days: 30, level: 3, fee: 15 }\n];\n\n// Hilfsfunktion zum Berechnen der Tage zwischen zwei Daten\nfunction daysBetween(date1, date2) {\n  const oneDay = 24 * 60 * 60 * 1000; // Stunden*Minuten*Sekunden*Millisekunden\n  return Math.round(Math.abs((date1 - date2) / oneDay));\n}\n\n// Prüfe, ob die Rechnung überfällig ist\nif (invoices && Array.isArray(invoices)) {\n  const overdueInvoices = invoices.filter(invoice => {\n    // Nur bezahlte Rechnungen ignorieren (Status 500)\n    if (invoice.status === 500) return false;\n    \n    // Prüfe, ob Fälligkeitsdatum überschritten ist\n    const dueDate = new Date(invoice.dueDate);\n    return dueDate < today;\n  });\n  \n  // Kategorisiere nach Mahnstufen\n  const categorizedInvoices = overdueInvoices.map(invoice => {\n    const dueDate = new Date(invoice.dueDate);\n    const daysOverdue = daysBetween(today, dueDate);\n    \n    let reminderLevel = 0;\n    let reminderFee = 0;\n    \n    // Mahnstufen aus Konfiguration anwenden\n    for (const level of reminderLevels) {\n      if (daysOverdue >= level.days) {\n        reminderLevel = level.level;\n        reminderFee = level.fee;\n      }\n    }\n    \n    // Verzugszinsen berechnen (Standard 9%)\n    const baseAmount = parseFloat(invoice.sumNet);\n    const interestRate = 0.09; // 9% Standard\n    const interestDays = daysOverdue;\n    const interestAmount = (baseAmount * interestRate * interestDays) / 365;\n    \n    return {\n      ...invoice,\n      daysOverdue,\n      reminderLevel,\n      interestAmount: parseFloat(interestAmount.toFixed(2)),\n      reminderFee,\n      totalAmount: parseFloat(invoice.sumGross) + parseFloat(interestAmount.toFixed(2)) + reminderFee\n    };\n  });\n  \n  // Nur Rechnungen mit Mahnstufe > 0 zurückgeben\n  return categorizedInvoices.filter(invoice => invoice.reminderLevel > 0);\n} else {\n  return [];\n}"
			},
			"id": "031_TRF_01",
			"name": "Überfällige Rechnungen filtern",
			"type": "n8n-nodes-base.code",
			"typeVersion": 2,
			"position": [850, 300]
		},
		{
			"parameters": {},
			"id": "031_SPL_01",
			"name": "SplitInBatches",
			"type": "n8n-nodes-base.splitInBatches",
			"typeVersion": 3,
			"position": [1050, 300]
		},
		{
			"parameters": {
				"resource": "contact",
				"operation": "get",
				"contactId": "={{ $json.contact.id }}"
			},
			"id": "031_SVC_02",
			"name": "Kundendaten abrufen",
			"type": "n8n-nodes-sevdesk-v2.sevDesk",
			"typeVersion": 1,
			"position": [1250, 300],
			"credentials": {
				"sevDeskApi": {
					"id": "6",
					"name": "SevDesk API"
				}
			}
		},
		{
			"parameters": {
				"code": "// Kombiniere Rechnungs- und Kundendaten\nconst invoice = $node[\"031_SPL_01\"].json;\nconst customer = $input.item.json;\n\n// Kundenspezifische Regeln (Standard-Konfiguration)\nconst customerRules = {};\nconst vipCategories = [];\n\n// Kundenspezifische Regeln prüfen\nlet skipReminder = false;\nlet customReminderLevel = null;\n\n// VIP-Kunden bekommen eine Mahnstufe weniger\nif (customer.category && vipCategories.includes(customer.category.id)) {\n  customReminderLevel = Math.max(0, invoice.reminderLevel - 1);\n}\n\n// Prüfe auf Ausnahmen aus der Konfiguration\nif (customerRules[customer.customerNumber] === \"DO_NOT_REMIND\") {\n  skipReminder = true;\n}\n\n// Daten für die Weiterverarbeitung vorbereiten\nreturn {\n  json: {\n    invoice: invoice,\n    customer: customer,\n    reminderLevel: customReminderLevel || invoice.reminderLevel,\n    skipReminder: skipReminder,\n    daysOverdue: invoice.daysOverdue,\n    interestAmount: invoice.interestAmount,\n    reminderFee: invoice.reminderFee,\n    totalAmount: invoice.totalAmount,\n    timestamp: new Date().toISOString(),\n    processed: false\n  }\n};"
			},
			"id": "031_TRF_02",
			"name": "Daten kombinieren",
			"type": "n8n-nodes-base.code",
			"typeVersion": 2,
			"position": [1450, 300]
		},
		{
			"parameters": {
				"conditions": {
					"boolean": [
						{
							"value1": "={{ $json.skipReminder }}",
							"value2": true
						}
					]
				}
			},
			"id": "031_VAL_01",
			"name": "Mahnung überspringen?",
			"type": "n8n-nodes-base.if",
			"typeVersion": 2.2,
			"position": [1650, 300]
		},
		{
			"parameters": {
				"method": "POST",
				"url": "http://localhost:5678/webhook/mahnwesen-verarbeitung",
				"authentication": "genericCredentialType",
				"genericAuthType": "httpHeaderAuth",
				"options": {
					"allowUnauthorizedCerts": true
				},
				"sendBody": true,
				"bodyParameters": {
					"parameters": [
						{
							"name": "data",
							"value": "={{ JSON.stringify({...$json, paymentProbability: 0.5}) }}"
						},
						{
							"name": "webhook_key",
							"value": "secret-key"
						}
					]
				}
			},
			"id": "031_FWD_01",
			"name": "Webhook zu Teil 2",
			"type": "n8n-nodes-base.httpRequest",
			"typeVersion": 4.2,
			"position": [2050, 300],
			"credentials": {
				"httpHeaderAuth": {
					"id": "8",
					"name": "Webhook Auth"
				}
			}
		},
		{
			"parameters": {
				"conditions": {
					"boolean": [
						{
							"value1": "={{ $node[\"Webhook zu Teil 2\"].error !== undefined }}",
							"value2": true
						}
					]
				}
			},
			"id": "031_ERR_01",
			"name": "Fehler aufgetreten?",
			"type": "n8n-nodes-base.if",
			"typeVersion": 2.2,
			"position": [2250, 300]
		},
		{
			"parameters": {
				"fromEmail": "error-reporting@example.com",
				"toEmail": "support@example.com",
				"subject": "Fehler im Mahnwesen-Workflow (Erkennung)",
				"text": "=Es ist ein Fehler im Mahnwesen-Workflow (Teil 1: Erkennung) aufgetreten:\n\nFehler: {{ $node[\"Webhook zu Teil 2\"].error.message }}\n\nDetails: {{ JSON.stringify($node[\"Webhook zu Teil 2\"].error, null, 2) }}\n\nZeitstempel: {{ $now.toISOString() }}\n\nBitte überprüfen Sie den Workflow und beheben Sie den Fehler.",
				"options": {}
			},
			"id": "031_NOT_01",
			"name": "Support benachrichtigen",
			"type": "n8n-nodes-base.emailSend",
			"typeVersion": 2.1,
			"position": [2650, 200],
			"credentials": {
				"smtp": {
					"id": "10",
					"name": "SMTP"
				}
			}
		},
		{
			"parameters": {
				"chatId": "support-alerts",
				"text": "=⚠️ FEHLER im Mahnwesen-Workflow (Erkennung):\n\n{{ $node[\"Webhook zu Teil 2\"].error.message }}\n\nZeitstempel: {{ $now.toISOString() }}"
			},
			"id": "031_NOT_02",
			"name": "Schedule-Notification",
			"type": "n8n-nodes-base.scheduleTrigger",
			"typeVersion": 1.2,
			"position": [2650, 400],
			"credentials": {
				"signalApi": {
					"id": "11",
					"name": "Signal API"
				}
			}
		}
	],
	"connections": {
		"031_TRG_01": {
			"main": [
				[
					{
						"node": "031_SVC_01",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"031_SVC_01": {
			"main": [
				[
					{
						"node": "031_TRF_01",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"031_TRF_01": {
			"main": [
				[
					{
						"node": "031_SPL_01",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"031_SPL_01": {
			"main": [
				[
					{
						"node": "031_SVC_02",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"031_SVC_02": {
			"main": [
				[
					{
						"node": "031_TRF_02",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"031_TRF_02": {
			"main": [
				[
					{
						"node": "031_VAL_01",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"031_VAL_01": {
			"main": [
				[],
				[
					{
						"node": "031_FWD_01",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"031_FWD_01": {
			"main": [
				[
					{
						"node": "031_ERR_01",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"031_ERR_01": {
			"main": [
				[
					{
						"node": "031_NOT_01",
						"type": "main",
						"index": 0
					},
					{
						"node": "031_NOT_02",
						"type": "main",
						"index": 0
					}
				],
				[]
			]
		}
	}
}
