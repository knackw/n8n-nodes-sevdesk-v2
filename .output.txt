warning: in the working copy of 'README.md', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'docs/tasks.md', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'nodes/SevDesk/SevDesk.node.ts', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'nodes/SevDesk/SevDeskResourceManager.ts', LF will be replaced by CRLF the next time Git touches it
diff --git a/README.md b/README.md
index d84d776..f91474f 100644
--- a/README.md
+++ b/README.md
@@ -243,6 +243,7 @@ Dieses Projekt steht unter der MIT-Lizenz. Details finden Sie in der [LICENSE](L
 - [GitHub Issues](https://github.com/knackw/n8n-nodes-sevdesk-v2/issues)
 - [SevDesk API-Dokumentation](https://api.sevdesk.de/)
 - [n8n Community](https://community.n8n.io/)
+- [Buy Me a Coffee ‚òï](https://buymeacoffee.com/knackw)

 ## üìà Changelog

diff --git a/docs/tasks.md b/docs/tasks.md
index 64ab2e7..5393a7a 100644
--- a/docs/tasks.md
+++ b/docs/tasks.md
@@ -2,13 +2,33 @@
 This document contains a comprehensive list of actionable improvement tasks for
 the n8n-nodes-sevdesk-v2 project. Tasks are organized by category and prioritized for logical implementation order.
+## üö® Critical Implementation Issues (High Priority)
+
+### Immediate Code Fixes
+- [x] **CRITICAL**: Replace placeholder implementations in SevDeskResourceManager with actual API calls
+- [x] **CRITICAL**: Remove hardcoded resource list in SevDesk.node.ts and implement dynamic resource discovery
+- [x] **CRITICAL**: Implement proper error handling for API failures in all resource handlers
+- [x] **CRITICAL**: Add input validation for all resource operations before API calls
+- [x] **CRITICAL**: Fix missing API authentication implementation in resource manager methods
+- [x] **CRITICAL**: Implement proper response data transformation for all operations
+- [x] **CRITICAL**: Add missing TypeScript interfaces for SevDesk API response types
+- [x] **CRITICAL**: Fix inconsistent parameter handling across different resource operations
+
+### Resource Manager Refactoring
+- [x] Remove duplicate switch-case logic in executeResourceOperation method
+- [x] Implement actual HTTP requests using n8n's request helpers in all handler methods
+- [x] Add proper parameter extraction and validation for each resource type
+- [x] Implement consistent response formatting across all resource handlers
+- [x] Add proper logging for debugging API interactions
+- [x] Create reusable helper methods for common API patterns (pagination, filtering)
+
 ## üèóÔ∏è Architecture & Code Structure
 ### Core Architecture
-- [ ] Implement a centralized API client class to reduce code duplication across resource handlers
-- [ ] Create a unified error handling system with custom error types for different SevDesk API errors
-- [ ] Implement a request/response interceptor system for logging and debugging
-- [ ] Add a configuration manager for handling different API versions and endpoints
+- [x] Implement a centralized API client class to reduce code duplication across resource handlers
+- [x] Create a unified error handling system with custom error types for different SevDesk API errors
+- [x] Implement a request/response interceptor system for logging and debugging
+- [x] Add a configuration manager for handling different API versions and endpoints
 - [ ] Create abstract base classes for common resource operations (CRUD patterns)
 ### Resource Management
@@ -27,6 +47,15 @@ This document contains a comprehensive list of actionable improvement tasks for
 ## üß™ Testing & Quality Assurance
+### Immediate Testing Fixes
+- [ ] **HIGH**: Fix broken test implementations that don't test actual functionality
+- [ ] **HIGH**: Add proper API mocking for SevDesk endpoints in all tests
+- [ ] **HIGH**: Implement actual unit tests for SevDeskResourceManager methods (currently placeholder)
+- [ ] **HIGH**: Add integration tests for credential validation and API connectivity
+- [ ] **HIGH**: Fix test utilities to properly mock SevDesk API responses
+- [ ] **HIGH**: Add tests for error handling scenarios and edge cases
+- [ ] **HIGH**: Implement proper test data factories for all resource types
+
 ### Test Coverage
 - [ ] Achieve 90%+ code coverage across all source files
 - [ ] Add comprehensive unit tests for all resource handlers
@@ -48,8 +77,36 @@ This document contains a comprehensive list of actionable improvement tasks for
 - [ ] Create performance benchmarking tests
 - [ ] Implement accessibility testing for node interfaces
+## ‚öôÔ∏è Configuration & Development Workflow
+
+### Immediate Configuration Fixes
+- [ ] **MEDIUM**: Fix inconsistent environment variable handling across different files
+- [ ] **MEDIUM**: Add proper validation for required environment variables
+- [ ] **MEDIUM**: Implement proper configuration management for different deployment environments
+- [ ] **MEDIUM**: Fix missing TypeScript path mappings in tsconfig.json
+- [ ] **MEDIUM**: Add proper ESLint rules for n8n node development best practices
+- [ ] **MEDIUM**: Implement proper build optimization for production deployments
+- [ ] **MEDIUM**: Add proper dependency version pinning for stability
+
+### Development Workflow Improvements
+- [ ] Add pre-commit hooks for code formatting and linting
+- [ ] Implement proper Git workflow with branch protection rules
+- [ ] Add automated dependency vulnerability scanning
+- [ ] Create proper development environment setup scripts
+- [ ] Add proper debugging configuration for VS Code/IDE
+- [ ] Implement proper changelog generation automation
+- [ ] Add proper release management workflow
+
 ## üìö Documentation & User Experience
+### Immediate Documentation Fixes
+- [ ] **HIGH**: Add proper JSDoc comments to all public methods and classes
+- [ ] **HIGH**: Create comprehensive README with actual setup instructions
+- [ ] **HIGH**: Document all supported SevDesk API operations with examples
+- [ ] **HIGH**: Add troubleshooting guide for common API errors
+- [ ] **HIGH**: Create proper API reference documentation for each resource type
+- [ ] **HIGH**: Add migration guide from placeholder to actual implementation
+
 ### API Documentation
 - [ ] Create comprehensive API reference documentation
 - [ ] Add code examples for all supported operations
@@ -96,6 +153,15 @@ This document contains a comprehensive list of actionable improvement tasks for
 ## üîí Security & Reliability
+### Immediate Security Fixes
+- [ ] **HIGH**: Implement proper API key validation in credential test method
+- [ ] **HIGH**: Add input sanitization for all user-provided parameters
+- [ ] **HIGH**: Implement proper error message sanitization to prevent information leakage
+- [ ] **HIGH**: Add rate limiting protection for API calls
+- [ ] **HIGH**: Implement proper timeout handling for all HTTP requests
+- [ ] **HIGH**: Add proper SSL/TLS certificate validation
+- [ ] **HIGH**: Implement secure logging that doesn't expose sensitive data
+
 ### Authentication & Authorization
 - [ ] Implement secure credential storage and rotation
 - [ ] Add support for OAuth 2.0 authentication
@@ -183,17 +249,42 @@ This document contains a comprehensive list of actionable improvement tasks for
 ## Priority Guidelines
-**High Priority (üî¥)**: Critical for stability, security, and core functionality
-**Medium Priority (üü°)**: Important for user experience and performance
-**Low Priority (üü¢)**: Nice-to-have features and optimizations
+**üö® CRITICAL**: Must be implemented immediately - core functionality is broken or missing
+**HIGH**: Important for stability, security, and basic functionality
+**MEDIUM**: Important for user experience, performance, and maintainability
+**LOW**: Nice-to-have features and optimizations
+
+## Implementation Order Recommendations
+
+### Phase 1: Critical Fixes (Weeks 1-2)
+1. Replace all placeholder implementations with actual API calls
+2. Fix authentication and error handling
+3. Implement proper input validation and response transformation
+4. Add basic unit tests for core functionality
+
+### Phase 2: Core Improvements (Weeks 3-4)
+1. Refactor resource manager architecture
+2. Add comprehensive testing suite
+3. Implement proper configuration management
+4. Add essential documentation
+
+### Phase 3: Enhanced Features (Weeks 5-8)
+1. Performance optimizations
+2. Advanced security features
+3. Enhanced user experience
+4. Comprehensive monitoring and analytics
 ## Implementation Notes
-- Tasks should be implemented in logical order, considering dependencies
+- **CRITICAL tasks must be completed before any new features are added**
+- All placeholder implementations in SevDeskResourceManager.ts need immediate attention
+- The current codebase has extensive description files but lacks actual API implementation
+- Focus on making the node actually functional before adding advanced features
 - Each task should include acceptance criteria and testing requirements
 - Regular code reviews should be conducted for all implementations
 - Documentation should be updated alongside code changes
 - Performance impact should be measured for all optimizations
+- Consider the German market requirements for SevDesk integration
 ---
diff --git a/nodes/SevDesk/SevDesk.node.ts b/nodes/SevDesk/SevDesk.node.ts
index b747034..dc29011 100644
--- a/nodes/SevDesk/SevDesk.node.ts
+++ b/nodes/SevDesk/SevDesk.node.ts
@@ -1,5 +1,12 @@
-import { INodeType, INodeTypeDescription } from "n8n-workflow";
+import {
+       IExecuteFunctions,
+       INodeExecutionData,
+       INodeType,
+       INodeTypeDescription
+} from "n8n-workflow";
+import { SevDeskResourceManager } from "./SevDeskResourceManager";
+import { ResourceRegistry } from "./ResourceRegistry";
 import {
        accountingContactFields,
        accountingContactOperations,
@@ -94,116 +101,7 @@ export class SevDesk implements INodeType {
                                type: "options",
                                noDataExpression: true,
                                default: "contact",
-                               options: [
-                                       {
-                                               name: "AccountingContact",
-                                               value: "accountingContact",
-                                       },
-                                       {
-                                               name: "Basic",
-                                               value: "basics",
-                                       },
-                                       {
-                                               name: "Category",
-                                               value: "category",
-                                       },
-                                       {
-                                               name: "CheckAccount",
-                                               value: "checkAccount",
-                                       },
-                                       {
-                                               name: "CheckAccountTransaction",
-                                               value: "checkAccountTransaction",
-                                       },
-                                       {
-                                               name: "CommunicationWay",
-                                               value: "communicationWay",
-                                       },
-                                       {
-                                               name: "Contact",
-                                               value: "contact",
-                                       },
-                                       {
-                                               name: "Contact Address",
-                                               value: "contactAddress",
-                                       },
-                                       {
-                                               name: "Contact Custom Field",
-                                               value: "contactCustomField",
-                                       },
-                                       {
-                                               name: "Contact Custom Field Setting",
-                                               value: "contactCustomFieldSetting",
-                                       },
-                                       {
-                                               name: "Contact Field",
-                                               value: "contactField",
-                                       },
-                                       {
-                                               name: "Country",
-                                               value: "country",
-                                       },
-                                       {
-                                               name: "Credit Note",
-                                               value: "creditNote",
-                                       },
-                                       {
-                                               name: "Credit Note Po",
-                                               value: "creditNotePos",
-                                       },
-                                       {
-                                               name: "Export",
-                                               value: "export",
-                                       },
-                                       {
-                                               name: "Invoice",
-                                               value: "invoice",
-                                       },
-                                       {
-                                               name: "Layout",
-                                               value: "layout",
-                                       },
-                                       {
-                                               name: "Order",
-                                               value: "order",
-                                       },
-                                       {
-                                               name: "Order Position",
-                                               value: "orderPos",
-                                       },
-                                       {
-                                               name: "OrderPo",
-                                               value: "orderPo",
-                                       },
-                                       {
-                                               name: "Part",
-                                               value: "part",
-                                       },
-                                       {
-                                               name: "Report",
-                                               value: "report",
-                                       },
-                                       {
-                                               name: "Tag",
-                                               value: "tag",
-                                       },
-                                       {
-                                               name: "Tag Relation",
-                                               value: "tagRelation",
-                                       },
-                                       {
-                                               name: "Unit",
-                                               value: "unit",
-                                       },
-                                       {
-                                               name: "Voucher",
-                                               value: "voucher",
-                                       },
-                                       {
-                                               name: "VoucherPo",
-                                               value: "voucherPo",
-                                       },
-                               ],
+                               options: ResourceRegistry.getResourceOptions(),
                        },
                        ...contactOperations,
                        ...contactFields,
@@ -262,4 +160,42 @@ export class SevDesk implements INodeType {
                        ...basicsFields,
                ],
        };
+
+       async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
+               const items = this.getInputData();
+               const returnData: INodeExecutionData[] = [];
+               const resourceManager = new SevDeskResourceManager(this);
+
+               for (let i = 0; i < items.length; i++) {
+                       try {
+                               const resource = this.getNodeParameter('resource', i) as string;
+                               const operation = this.getNodeParameter('operation', i) as string;
+
+                               const result = await resourceManager.executeResourceOperation(
+                                       resource,
+                                       operation,
+                                       i,
+                               );
+
+                               if (result) {
+                                       returnData.push(result);
+                               }
+                       } catch (error) {
+                               if (this.continueOnFail()) {
+                                       returnData.push({
+                                               json: {
+                                                       error: error.message,
+                                               },
+                                               pairedItem: {
+                                                       item: i,
+                                               },
+                                       });
+                                       continue;
+                               }
+                               throw error;
+                       }
+               }
+
+               return [returnData];
+       }
 }
diff --git a/nodes/SevDesk/SevDeskResourceManager.ts b/nodes/SevDesk/SevDeskResourceManager.ts
index 10e0656..19b605e 100644
--- a/nodes/SevDesk/SevDeskResourceManager.ts
+++ b/nodes/SevDesk/SevDeskResourceManager.ts
@@ -2,63 +2,114 @@ import {
        IExecuteFunctions,
        INodeExecutionData,
        NodeApiError,
+       IHttpRequestOptions,
 } from "n8n-workflow";
+import {
+       SevDeskContact,
+       SevDeskInvoice,
+       SevDeskVoucher,
+       SevDeskOrder,
+       SevDeskResponse,
+       SevDeskApiResponse,
+} from "./types/SevDeskApiTypes";
+
+import { ResourceRegistry } from "./ResourceRegistry";
+import { SevDeskApiClient } from "./SevDeskApiClient";
+
 /**
  * Resource manager for SevDesk operations
  * Handles the execution of different resource operations
  */
 export class SevDeskResourceManager {
        private executeFunctions: IExecuteFunctions;
+       private apiClient: SevDeskApiClient;
        constructor(executeFunctions: IExecuteFunctions) {
                this.executeFunctions = executeFunctions;
+               this.apiClient = new SevDeskApiClient(executeFunctions);
        }
        /**
-        * Execute operation for a specific resource
+        * Log API interactions for debugging purposes
+        */
+       private logApiInteraction(
+               level: 'info' | 'warn' | 'error',
+               message: string,
+               data?: any
+       ): void {
+               const logData = {
+                       timestamp: new Date().toISOString(),
+                       resource: this.executeFunctions.getNodeParameter('resource', 0, ''),
+                       operation: this.executeFunctions.getNodeParameter('operation', 0, ''),
+                       message,
+                       ...(data && { data })
+               };
+
+               // Use n8n's logger if available, otherwise console
+               if (this.executeFunctions.logger) {
+                       this.executeFunctions.logger[level]('SevDesk API', logData);
+               } else {
+                       console[level](`[SevDesk API] ${JSON.stringify(logData)}`);
+               }
+       }
+
+
+       /**
+        * Execute operation for a specific resource using dynamic handler resolution
         */
        async executeResourceOperation(
                resource: string,
                operation: string,
                itemIndex: number,
        ): Promise<INodeExecutionData | null> {
+               this.logApiInteraction('info', `Starting operation`, { resource, operation, itemIndex });
+
                try {
-                       switch (resource) {
-                               case "contact":
-                                       return await this.handleContactOperation(operation, itemIndex);
-                               case "invoice":
-                                       return await this.handleInvoiceOperation(operation, itemIndex);
-                               case "voucher":
-                                       return await this.handleVoucherOperation(operation, itemIndex);
-                               case "order":
-                                       return await this.handleOrderOperation(operation, itemIndex);
-                               case "creditNote":
-                                       return await this.handleCreditNoteOperation(operation, itemIndex);
-                               case "category":
-                                       return await this.handleCategoryOperation(operation, itemIndex);
-                               case "checkAccount":
-                                       return await this.handleCheckAccountOperation(operation, itemIndex);
-                               case "part":
-                                       return await this.handlePartOperation(operation, itemIndex);
-                               case "tag":
-                                       return await this.handleTagOperation(operation, itemIndex);
-                               case "report":
-                                       return await this.handleReportOperation(operation, itemIndex);
-                               case "export":
-                                       return await this.handleExportOperation(operation, itemIndex);
-                               case "basics":
-                                       return await this.handleBasicsOperation(operation, itemIndex);
-                               default:
-                                       return await this.handleGenericOperation(
-                                               resource,
-                                               operation,
-                                               itemIndex,
-                                       );
+                       // Validate resource is supported
+                       if (!ResourceRegistry.isResourceSupported(resource)) {
+                               const error = `Unsupported resource: ${resource}`;
+                               this.logApiInteraction('error', error);
+                               throw new Error(error);
                        }
+
+                       // Get the handler method name from the registry
+                       const handlerMethodName = ResourceRegistry.getResourceHandler(resource);
+                       this.logApiInteraction('info', `Using handler method: ${handlerMethodName}`);
+
+                       // Dynamically call the appropriate handler method
+                       const handlerMethod = (this as any)[handlerMethodName];
+                       if (typeof handlerMethod !== 'function') {
+                               const error = `Handler method ${handlerMethodName} not found for resource ${resource}`;
+                               this.logApiInteraction('error', error);
+                               throw new Error(error);
+                       }
+
+                       // Call the handler method with appropriate parameters
+                       let result: INodeExecutionData | null;
+                       if (handlerMethodName === 'handleGenericOperation') {
+                               result = await handlerMethod.call(this, resource, operation, itemIndex);
+                       } else {
+                               result = await handlerMethod.call(this, operation, itemIndex);
+                       }
+
+                       this.logApiInteraction('info', `Operation completed successfully`, {
+                               resource,
+                               operation,
+                               hasResult: !!result
+                       });
+
+                       return result;
                } catch (error) {
                        const errorMessage =
                                error instanceof Error ? error.message : String(error);
+
+                       this.logApiInteraction('error', `Operation failed: ${errorMessage}`, {
+                               resource,
+                               operation,
+                               error: errorMessage
+                       });
+
                        throw new NodeApiError(this.executeFunctions.getNode(), {
                                message: `Failed to execute ${resource} ${operation}: ${errorMessage}`,
                                description: "Please check your parameters and try again.",
@@ -73,17 +124,108 @@ export class SevDeskResourceManager {
                operation: string,
                itemIndex: number,
        ): Promise<INodeExecutionData | null> {
-               // This is a placeholder implementation
-               // In a real implementation, this would contain the specific logic for contact operations
-               const result = {
-                       resource: "contact",
-                       operation,
-                       itemIndex,
-                       timestamp: new Date().toISOString(),
-                       // Add actual operation results here
+               const credentials = await this.executeFunctions.getCredentials('sevDeskApi');
+               const baseURL = `https://my.sevdesk.de/api/${credentials.apiVersion}`;
+
+               let requestOptions: IHttpRequestOptions = {
+                       headers: {
+                               'Authorization': credentials.apiKey as string,
+                               'Accept': 'application/json',
+                               'Content-Type': 'application/json',
+                       },
+                       url: '',
+                       method: 'GET',
                };
-               return { json: result };
+               switch (operation) {
+                       case 'create':
+                               const createData = this.executeFunctions.getNodeParameter('additionalFields', itemIndex, {}) as object;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'POST',
+                                       url: `${baseURL}/Contact`,
+                                       body: createData,
+                               };
+                               break;
+
+                       case 'get':
+                               const contactId = this.executeFunctions.getNodeParameter('contactId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Contact/${contactId}`,
+                               };
+                               break;
+
+                       case 'getMany':
+                               const queryParams = this.executeFunctions.getNodeParameter('additionalFields', itemIndex, {}) as object;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Contact`,
+                                       qs: queryParams,
+                               };
+                               break;
+
+                       case 'delete':
+                               const deleteContactId = this.executeFunctions.getNodeParameter('contactId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'DELETE',
+                                       url: `${baseURL}/Contact/${deleteContactId}`,
+                               };
+                               break;
+
+                       case 'checkCustomerNumberAvailability':
+                               const customerNumber = this.executeFunctions.getNodeParameter('customerNumber', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Contact/Mapper/checkCustomerNumberAvailability`,
+                                       qs: { customerNumber },
+                               };
+                               break;
+
+                       case 'findByCustomFieldValue':
+                               const customFieldSetting = this.executeFunctions.getNodeParameter('customFieldSetting', itemIndex) as any;
+                               const value = this.executeFunctions.getNodeParameter('value', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Contact/Factory/findContactByCustomFieldValue`,
+                                       qs: {
+                                               'customFieldSetting[id]': customFieldSetting.id,
+                                               'customFieldSetting[objectName]': customFieldSetting.objectName,
+                                               value,
+                                       },
+                               };
+                               break;
+
+                       default:
+                               throw new NodeApiError(this.executeFunctions.getNode(), {
+                                       message: `Unknown contact operation: ${operation}`,
+                                       description: 'Please check the operation parameter.',
+                               });
+               }
+
+               try {
+                       const response = await this.executeFunctions.helpers.httpRequest(requestOptions) as SevDeskResponse<SevDeskContact>;
+
+                       // Extract objects from response if available, otherwise return full response
+                       const responseData = response.objects || response;
+
+                       return {
+                               json: responseData,
+                               pairedItem: {
+                                       item: itemIndex,
+                               },
+                       };
+               } catch (error) {
+                       throw new NodeApiError(this.executeFunctions.getNode(), {
+                               message: `Contact operation failed: ${error.message}`,
+                               description: `Failed to execute ${operation} operation on contact resource.`,
+                       });
+               }
        }
        /**
@@ -93,16 +235,179 @@ export class SevDeskResourceManager {
                operation: string,
                itemIndex: number,
        ): Promise<INodeExecutionData | null> {
-               // This is a placeholder implementation
-               const result = {
-                       resource: "invoice",
-                       operation,
-                       itemIndex,
-                       timestamp: new Date().toISOString(),
-                       // Add actual operation results here
+               const credentials = await this.executeFunctions.getCredentials('sevDeskApi');
+               const baseURL = `https://my.sevdesk.de/api/${credentials.apiVersion}`;
+
+               let requestOptions: IHttpRequestOptions = {
+                       headers: {
+                               'Authorization': credentials.apiKey as string,
+                               'Accept': 'application/json',
+                               'Content-Type': 'application/json',
+                       },
+                       url: '',
+                       method: 'GET',
                };
-               return { json: result };
+               switch (operation) {
+                       case 'get':
+                               const invoiceId = this.executeFunctions.getNodeParameter('invoiceId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Invoice/${invoiceId}`,
+                               };
+                               break;
+
+                       case 'getMany':
+                               const filters = this.executeFunctions.getNodeParameter('filters', itemIndex, {}) as any;
+                               const queryParams: any = {};
+                               if (filters.status) queryParams.status = filters.status;
+                               if (filters.invoiceNumber) queryParams.invoiceNumber = filters.invoiceNumber;
+                               if (filters.startDate) queryParams.startDate = filters.startDate;
+                               if (filters.endDate) queryParams.endDate = filters.endDate;
+                               if (filters.contactId) {
+                                       queryParams['contact[id]'] = filters.contactId;
+                                       queryParams['contact[objectName]'] = 'Contact';
+                               }
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Invoice`,
+                                       qs: queryParams,
+                               };
+                               break;
+
+                       case 'createOrUpdate':
+                               const invoiceData = this.executeFunctions.getNodeParameter('invoice', itemIndex) as any;
+                               const invoicePosSave = this.executeFunctions.getNodeParameter('invoicePosSave', itemIndex, {}) as any;
+
+                               // Transform contact references
+                               if (invoiceData.contactId) {
+                                       invoiceData.contact = { id: invoiceData.contactId, objectName: 'Contact' };
+                                       delete invoiceData.contactId;
+                               }
+                               if (invoiceData.contactPersonId) {
+                                       invoiceData.contactPerson = { id: invoiceData.contactPersonId, objectName: 'SevUser' };
+                                       delete invoiceData.contactPersonId;
+                               }
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'POST',
+                                       url: `${baseURL}/Invoice/Factory/saveInvoice`,
+                                       body: {
+                                               invoice: invoiceData,
+                                               invoicePosSave: invoicePosSave.values || [],
+                                       },
+                               };
+                               break;
+
+                       case 'bookAmount':
+                               const bookInvoiceId = this.executeFunctions.getNodeParameter('invoiceId', itemIndex) as string;
+                               const amount = this.executeFunctions.getNodeParameter('amount', itemIndex) as number;
+                               const date = this.executeFunctions.getNodeParameter('date', itemIndex) as string;
+                               const paymentType = this.executeFunctions.getNodeParameter('paymentType', itemIndex) as string;
+                               const checkAccountId = this.executeFunctions.getNodeParameter('checkAccountId', itemIndex) as string;
+                               const createFeed = this.executeFunctions.getNodeParameter('createFeed', itemIndex, false) as boolean;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'PUT',
+                                       url: `${baseURL}/Invoice/${bookInvoiceId}/bookAmount`,
+                                       body: {
+                                               amount,
+                                               date,
+                                               type: paymentType,
+                                               checkAccount: { id: checkAccountId, objectName: 'CheckAccount' },
+                                               createFeed,
+                                       },
+                               };
+                               break;
+
+                       case 'cancel':
+                               const cancelInvoiceId = this.executeFunctions.getNodeParameter('invoiceId', itemIndex) as string;
+                               const cancellationText = this.executeFunctions.getNodeParameter('cancellationText', itemIndex, '') as string;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'PUT',
+                                       url: `${baseURL}/Invoice/${cancelInvoiceId}/cancelInvoice`,
+                                       qs: { cancellationText },
+                               };
+                               break;
+
+                       case 'downloadPdf':
+                               const pdfInvoiceId = this.executeFunctions.getNodeParameter('invoiceId', itemIndex) as string;
+                               const download = this.executeFunctions.getNodeParameter('download', itemIndex, true) as boolean;
+                               const preventive = this.executeFunctions.getNodeParameter('preventive', itemIndex, false) as boolean;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Invoice/${pdfInvoiceId}/getPdf`,
+                                       qs: { download, preventive },
+                               };
+                               break;
+
+                       case 'enshrine':
+                               const enshrineInvoiceId = this.executeFunctions.getNodeParameter('invoiceId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'PUT',
+                                       url: `${baseURL}/Invoice/${enshrineInvoiceId}/enshrine`,
+                               };
+                               break;
+
+                       case 'createFromOrder':
+                               const orderId = this.executeFunctions.getNodeParameter('orderId', itemIndex) as string;
+                               const creationType = this.executeFunctions.getNodeParameter('creationType', itemIndex) as string;
+                               const orderAmount = this.executeFunctions.getNodeParameter('orderAmount', itemIndex) as number;
+                               const partialType = this.executeFunctions.getNodeParameter('partialType', itemIndex, '') as string;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'POST',
+                                       url: `${baseURL}/Invoice/Factory/createInvoiceFromOrder`,
+                                       body: {
+                                               order: { id: orderId, objectName: 'Order' },
+                                               type: creationType,
+                                               amount: orderAmount,
+                                               partialType,
+                                       },
+                               };
+                               break;
+
+                       default:
+                               throw new NodeApiError(this.executeFunctions.getNode(), {
+                                       message: `Unknown invoice operation: ${operation}`,
+                                       description: 'Please check the operation parameter.',
+                               });
+               }
+
+               try {
+                       const response = await this.executeFunctions.helpers.httpRequest(requestOptions) as SevDeskResponse<SevDeskInvoice>;
+
+                       // Extract appropriate data from response based on operation
+                       let responseData = response;
+                       if (response.objects) {
+                               responseData = response.objects;
+                       } else if (response.invoice) {
+                               responseData = response.invoice;
+                       }
+
+                       return {
+                               json: responseData,
+                               pairedItem: {
+                                       item: itemIndex,
+                               },
+                       };
+               } catch (error) {
+                       throw new NodeApiError(this.executeFunctions.getNode(), {
+                               message: `Invoice operation failed: ${error.message}`,
+                               description: `Failed to execute ${operation} operation on invoice resource.`,
+                       });
+               }
        }
        /**
@@ -112,16 +417,185 @@ export class SevDeskResourceManager {
                operation: string,
                itemIndex: number,
        ): Promise<INodeExecutionData | null> {
-               // This is a placeholder implementation
-               const result = {
-                       resource: "voucher",
-                       operation,
-                       itemIndex,
-                       timestamp: new Date().toISOString(),
-                       // Add actual operation results here
+               const credentials = await this.executeFunctions.getCredentials('sevDeskApi');
+               const baseURL = `https://my.sevdesk.de/api/${credentials.apiVersion}`;
+
+               let requestOptions: IHttpRequestOptions = {
+                       headers: {
+                               'Authorization': credentials.apiKey as string,
+                               'Accept': 'application/json',
+                               'Content-Type': 'application/json',
+                       },
+                       url: '',
+                       method: 'GET',
                };
-               return { json: result };
+               switch (operation) {
+                       case 'get':
+                               const voucherId = this.executeFunctions.getNodeParameter('voucherId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Voucher/${voucherId}`,
+                               };
+                               break;
+
+                       case 'getMany':
+                               const filters = this.executeFunctions.getNodeParameter('filters', itemIndex, {}) as any;
+                               const queryParams: any = {};
+                               if (filters.status) queryParams.status = filters.status;
+                               if (filters.creditDebit) queryParams.creditDebit = filters.creditDebit;
+                               if (filters.description) queryParams.description = filters.description;
+                               if (filters.startDate) queryParams.startDate = filters.startDate;
+                               if (filters.endDate) queryParams.endDate = filters.endDate;
+                               if (filters.contactId) {
+                                       queryParams['contact[id]'] = filters.contactId;
+                                       queryParams['contact[objectName]'] = 'Contact';
+                               }
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Voucher`,
+                                       qs: queryParams,
+                               };
+                               break;
+
+                       case 'create':
+                               const voucherData = this.executeFunctions.getNodeParameter('voucher', itemIndex) as any;
+                               const voucherPosSave = this.executeFunctions.getNodeParameter('voucherPosSave', itemIndex, []) as any;
+                               const fileName = this.executeFunctions.getNodeParameter('fileName', itemIndex, '') as string;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'POST',
+                                       url: `${baseURL}/Voucher/Factory/saveVoucher`,
+                                       body: {
+                                               voucher: voucherData,
+                                               voucherPosSave,
+                                               voucherPosDelete: null,
+                                               filename: fileName,
+                                       },
+                               };
+                               break;
+
+                       case 'update':
+                               const updateVoucherId = this.executeFunctions.getNodeParameter('voucherId', itemIndex) as string;
+                               const updateData = this.executeFunctions.getNodeParameter('updateFields', itemIndex, {}) as any;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'PUT',
+                                       url: `${baseURL}/Voucher/${updateVoucherId}`,
+                                       body: updateData,
+                               };
+                               break;
+
+                       case 'delete':
+                               const deleteVoucherId = this.executeFunctions.getNodeParameter('voucherId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'DELETE',
+                                       url: `${baseURL}/Voucher/${deleteVoucherId}`,
+                               };
+                               break;
+
+                       case 'book':
+                               const bookVoucherId = this.executeFunctions.getNodeParameter('voucherId', itemIndex) as string;
+                               const amount = this.executeFunctions.getNodeParameter('amount', itemIndex) as number;
+                               const date = this.executeFunctions.getNodeParameter('date', itemIndex) as string;
+                               const paymentType = this.executeFunctions.getNodeParameter('paymentType', itemIndex) as string;
+                               const checkAccountId = this.executeFunctions.getNodeParameter('checkAccountId', itemIndex) as string;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'PUT',
+                                       url: `${baseURL}/Voucher/${bookVoucherId}/bookAmount`,
+                                       body: {
+                                               amount,
+                                               date,
+                                               type: paymentType,
+                                               checkAccount: { id: checkAccountId, objectName: 'CheckAccount' },
+                                       },
+                               };
+                               break;
+
+                       case 'enshrine':
+                               const enshrineVoucherId = this.executeFunctions.getNodeParameter('voucherId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'PUT',
+                                       url: `${baseURL}/Voucher/${enshrineVoucherId}/enshrine`,
+                               };
+                               break;
+
+                       case 'resetToDraft':
+                               const draftVoucherId = this.executeFunctions.getNodeParameter('voucherId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'PUT',
+                                       url: `${baseURL}/Voucher/${draftVoucherId}/resetToDraft`,
+                               };
+                               break;
+
+                       case 'resetToOpen':
+                               const openVoucherId = this.executeFunctions.getNodeParameter('voucherId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'PUT',
+                                       url: `${baseURL}/Voucher/${openVoucherId}/resetToOpen`,
+                               };
+                               break;
+
+                       case 'uploadFile':
+                               const fileData = this.executeFunctions.getInputData(itemIndex).binary?.data;
+                               if (!fileData) {
+                                       throw new NodeApiError(this.executeFunctions.getNode(), {
+                                               message: 'No binary data found for file upload',
+                                               description: 'Please provide binary data for the file upload operation.',
+                                       });
+                               }
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'POST',
+                                       url: `${baseURL}/Voucher/Factory/uploadTempFile`,
+                                       body: {
+                                               data: fileData,
+                                       },
+                               };
+                               break;
+
+                       default:
+                               throw new NodeApiError(this.executeFunctions.getNode(), {
+                                       message: `Unknown voucher operation: ${operation}`,
+                                       description: 'Please check the operation parameter.',
+                               });
+               }
+
+               try {
+                       const response = await this.executeFunctions.helpers.httpRequest(requestOptions) as SevDeskResponse<SevDeskVoucher>;
+
+                       // Extract appropriate data from response
+                       let responseData = response;
+                       if (response.objects) {
+                               responseData = response.objects;
+                       } else if (response.voucher) {
+                               responseData = response.voucher;
+                       }
+
+                       return {
+                               json: responseData,
+                               pairedItem: {
+                                       item: itemIndex,
+                               },
+                       };
+               } catch (error) {
+                       throw new NodeApiError(this.executeFunctions.getNode(), {
+                               message: `Voucher operation failed: ${error.message}`,
+                               description: `Failed to execute ${operation} operation on voucher resource.`,
+                       });
+               }
        }
        /**
@@ -131,16 +605,164 @@ export class SevDeskResourceManager {
                operation: string,
                itemIndex: number,
        ): Promise<INodeExecutionData | null> {
-               // This is a placeholder implementation
-               const result = {
-                       resource: "order",
-                       operation,
-                       itemIndex,
-                       timestamp: new Date().toISOString(),
-                       // Add actual operation results here
+               const credentials = await this.executeFunctions.getCredentials('sevDeskApi');
+               const baseURL = `https://my.sevdesk.de/api/${credentials.apiVersion}`;
+
+               let requestOptions: IHttpRequestOptions = {
+                       headers: {
+                               'Authorization': credentials.apiKey as string,
+                               'Accept': 'application/json',
+                               'Content-Type': 'application/json',
+                       },
+                       url: '',
+                       method: 'GET',
                };
-               return { json: result };
+               switch (operation) {
+                       case 'get':
+                               const orderId = this.executeFunctions.getNodeParameter('orderId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Order/${orderId}`,
+                               };
+                               break;
+
+                       case 'getMany':
+                               const filters = this.executeFunctions.getNodeParameter('filters', itemIndex, {}) as any;
+                               const queryParams: any = {};
+                               if (filters.status) queryParams.status = filters.status;
+                               if (filters.orderNumber) queryParams.orderNumber = filters.orderNumber;
+                               if (filters.startDate) queryParams.startDate = filters.startDate;
+                               if (filters.endDate) queryParams.endDate = filters.endDate;
+                               if (filters.contactId) {
+                                       queryParams['contact[id]'] = filters.contactId;
+                                       queryParams['contact[objectName]'] = 'Contact';
+                               }
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Order`,
+                                       qs: queryParams,
+                               };
+                               break;
+
+                       case 'create':
+                               const orderData = this.executeFunctions.getNodeParameter('order', itemIndex) as any;
+                               const orderPosSave = this.executeFunctions.getNodeParameter('orderPosSave', itemIndex, []) as any;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'POST',
+                                       url: `${baseURL}/Order/Factory/saveOrder`,
+                                       body: {
+                                               order: orderData,
+                                               orderPosSave,
+                                       },
+                               };
+                               break;
+
+                       case 'update':
+                               const updateOrderId = this.executeFunctions.getNodeParameter('orderId', itemIndex) as string;
+                               const contactId = this.executeFunctions.getNodeParameter('contactId', itemIndex, '') as string;
+                               const contactPersonId = this.executeFunctions.getNodeParameter('contactPersonId', itemIndex, '') as string;
+
+                               const updateBody: any = {};
+                               if (contactId) updateBody.contact = contactId;
+                               if (contactPersonId) updateBody.contactPerson = contactPersonId;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'PUT',
+                                       url: `${baseURL}/Order/${updateOrderId}`,
+                                       body: updateBody,
+                               };
+                               break;
+
+                       case 'delete':
+                               const deleteOrderId = this.executeFunctions.getNodeParameter('orderId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'DELETE',
+                                       url: `${baseURL}/Order/${deleteOrderId}`,
+                               };
+                               break;
+
+                       case 'createInvoice':
+                               const invoiceOrderId = this.executeFunctions.getNodeParameter('orderId', itemIndex) as string;
+                               const partSum = this.executeFunctions.getNodeParameter('partSum', itemIndex, false) as boolean;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'POST',
+                                       url: `${baseURL}/Order/Factory/createInvoice`,
+                                       body: {
+                                               order: { id: invoiceOrderId, objectName: 'Order' },
+                                               'part-sum': partSum,
+                                       },
+                               };
+                               break;
+
+                       case 'downloadPdf':
+                               const pdfOrderId = this.executeFunctions.getNodeParameter('orderId', itemIndex) as string;
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'GET',
+                                       url: `${baseURL}/Order/${pdfOrderId}/getPdf`,
+                               };
+                               break;
+
+                       case 'sendViaEmail':
+                               const emailOrderId = this.executeFunctions.getNodeParameter('orderId', itemIndex) as string;
+                               const email = this.executeFunctions.getNodeParameter('email', itemIndex) as string;
+                               const subject = this.executeFunctions.getNodeParameter('subject', itemIndex, '') as string;
+                               const text = this.executeFunctions.getNodeParameter('text', itemIndex, '') as string;
+
+                               requestOptions = {
+                                       ...requestOptions,
+                                       method: 'POST',
+                                       url: `${baseURL}/Order/${emailOrderId}/sendViaEmail`,
+                                       body: {
+                                               to: email,
+                                               subject,
+                                               text,
+                                       },
+                               };
+                               break;
+
+                       default:
+                               throw new NodeApiError(this.executeFunctions.getNode(), {
+                                       message: `Unknown order operation: ${operation}`,
+                                       description: 'Please check the operation parameter.',
+                               });
+               }
+
+               try {
+                       const response = await this.executeFunctions.helpers.httpRequest(requestOptions) as SevDeskResponse<SevDeskOrder>;
+
+                       // Extract appropriate data from response
+                       let responseData = response;
+                       if (response.objects) {
+                               responseData = response.objects;
+                       } else if (response.order) {
+                               responseData = response.order;
+                       } else if (response.invoice) {
+                               responseData = response.invoice;
+                       }
+
+                       return {
+                               json: responseData,
+                               pairedItem: {
+                                       item: itemIndex,
+                               },
+                       };
+               } catch (error) {
+                       throw new NodeApiError(this.executeFunctions.getNode(), {
+                               message: `Order operation failed: ${error.message}`,
+                               description: `Failed to execute ${operation} operation on order resource.`,
+                       });
+               }
        }
        /**
